name: Build, Push, and Deploy Docker Image

on:
  workflow_dispatch:  # 수동 트리거 이벤트

jobs:
  build-push:
    runs-on: ubuntu-24.04
    steps:
      # 1. 저장소 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. application-prod.properties 암호화
      - name: Add secrets into properties
        run: |
          echo "${{ secrets.APPLICATION_PROD }}" | base64 --decode > ./src/main/resources/application-prod.properties

      # 3. Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-ubuntu-app:latest .

      # 4. application-prod.properties 빌드 후 제거하기
      - name: Clean up application-prod.properties
        run: rm ./src/main/resources/application-prod.properties

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker 이미지 푸시
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-ubuntu-app:latest


  deploy:
    needs: [ build-push ]  # build와 push-image Job이 완료된 후 실행
    runs-on: self-hosted  # Self-hosted Runner 사용

    env:
      PROJECT_NAME: "spring-ubuntu-app"

    steps:
      # 1. Docker Hub 로그인하기
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 2. Docker 이미지 Pull
      - name: Pull Docker Image
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}

      # 3. 기존 컨테이너 중지
      - name: Stop Old Container
        run: sudo docker stop ${{ env.PROJECT_NAME }} || true

      # 4. 기존 컨테이너 삭제
      - name: Remove Old Container
        run: sudo docker rm ${{ env.PROJECT_NAME }} || true
      #네트워크 통신 설정
      - name: fucking network
        run: docker network create my-network || true

      #redis 실행
      - name: Run Redis Container
        run: |
          sudo docker network create my-network || true
          sudo docker run -d --name redis-container --network my-network redis || true
      # 5. 새 컨테이너 실행
      - name: Run New Container and rout
        run: docker run -d --name spring-ubuntu-app --network my-network -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/spring-ubuntu-app:latest

      # 6. 오래된 이미지 삭제
      - name: Remove Old Images
        run: sudo docker image prune -a -f || true